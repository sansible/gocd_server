---

- name: Copy secrets from S3
  become: yes
  become_user: "{{ sansible_gocd_server_user }}"
  command: "aws s3 cp --region {{ sansible_gocd_server_aws_region }} {{ item.s3_path }} {{ item.local_path }}"
  args:
    creates: "{{ item.local_path }}"
  with_items: "{{ sansible_gocd_server_aws_s3_secret_files }}"

- name: Secure secrets from S3
  become: yes
  file:
    group: "{{ sansible_gocd_server_user }}"
    mode: "{{ item.mode | default(0600) }}"
    owner: "{{ sansible_gocd_server_user }}"
    path: "{{ item.local_path }}"
  with_items: "{{ sansible_gocd_server_aws_s3_secret_files }}"

- name: Configure SSH
  become: yes
  copy:
    src: ssh_config
    dest: "/home/{{ sansible_gocd_server_user }}/.ssh/config"
    group: "{{ sansible_gocd_server_group }}"
    owner: "{{ sansible_gocd_server_user }}"
    mode: 0600

- name: Configure SSH agent setup in bash profile
  become: yes
  template:
    src: .bashrc.j2
    dest: "/home/{{ sansible_gocd_server_user }}/.bashrc"
    group: "{{ sansible_gocd_server_user }}"
    owner: "{{ sansible_gocd_server_user }}"
    mode: 0644

- name: Ensures go-server configuration
  become: yes
  template:
    dest: /usr/share/go-server/wrapper-config/wrapper-properties.conf
    group: "{{ sansible_gocd_server_group }}"
    owner: "{{ sansible_gocd_server_user }}"
    src: wrapper-properties.conf.j2
  register: sansible_gocd_server_config_file_update

- name: Ensures go-server user passwords file
  become: yes
  template:
    dest: "/home/{{ sansible_gocd_server_user }}/passwd"
    group: "{{ sansible_gocd_server_group }}"
    mode: 0600
    owner: "{{ sansible_gocd_server_user }}"
    src: passwd.j2
  when: sansible_gocd_server_passwd_users | length > 0

- name: Ensures go-server backup and restore scripts
  become: yes
  template:
    dest: "{{ item.dest }}"
    group: "{{ sansible_gocd_server_group }}"
    mode: 0750
    owner: "{{ sansible_gocd_server_user }}"
    src: "{{ item.src }}"
  with_items:
    - src: aws_s3_backup.sh.j2
      dest: "/home/{{ sansible_gocd_server_user }}/bin/aws_s3_backup.sh"
    - src: aws_s3_restore.sh.j2
      dest: "/home/{{ sansible_gocd_server_user }}/bin/aws_s3_restore.sh"
    - src: aws_s3_restore_artifacts.sh.j2
      dest: "/home/{{ sansible_gocd_server_user }}/bin/aws_s3_restore_artifacts.sh"
  when: sansible_gocd_server_aws_backup_bucket is not none

- name: Ensures go-server backup cron job
  become: yes
  cron:
    hour: 9,12,15,18
    job: "PATH=$PATH /home/{{ sansible_gocd_server_user }}/bin/aws_s3_backup.sh > /var/log/go-server/aws_s3_backup.log 2>&1"
    name: Backup go-server
    minute: 0
    weekday: 1-7
  when:
    - sansible_gocd_server_aws_backup_bucket is not none
    - sansible_gocd_server_backup_cron_enabled

- name: Setup AWS credentials
  become: yes
  become_user: "{{ sansible_gocd_server_user }}"
  template:
    dest: "/home/{{ sansible_gocd_server_user }}/.aws/credentials"
    mode: 0600
    src: aws_credentials.j2
  when: sansible_gocd_server_aws_access_key_id is not none

- name: Restore config from AWS
  become: yes
  become_user: "{{ sansible_gocd_server_user }}"
  command: "/home/{{ sansible_gocd_server_user }}/bin/aws_s3_restore.sh"
  args:
    chdir: "/home/{{ sansible_gocd_server_user }}"
  when: sansible_gocd_server_aws_backup_bucket is not none

- name: Ensure gocd server is running
  become: yes
  service:
    name: go-server
    state: started

- name: Wait for service port
  wait_for:
    port: "{{ sansible_gocd_server_port }}"
    state: started
    timeout: 300
